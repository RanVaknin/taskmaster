package com.rafaelsdiamonds.taskmaster;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Toast;

import com.amazonaws.amplify.generated.graphql.CreateTaskMutation;
import com.amazonaws.amplify.generated.graphql.ListTeamsQuery;
import com.amazonaws.mobile.client.AWSMobileClient;
import com.amazonaws.mobile.config.AWSConfiguration;
import com.amazonaws.mobileconnectors.appsync.AWSAppSyncClient;
import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;
import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;
import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;
import com.amazonaws.mobileconnectors.s3.transferutility.TransferUtility;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.CannedAccessControlList;
import com.amazonaws.services.s3.model.S3Object;
import com.apollographql.apollo.GraphQLCall;
import com.apollographql.apollo.api.Response;
import com.apollographql.apollo.exception.ApolloException;
import com.example.taskmaster.R;

import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.net.URL;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Random;
import java.util.UUID;

import javax.annotation.Nonnull;

import type.CreateTaskInput;

public class AddTask extends AppCompatActivity {

    Bitmap bitmap;
    private AWSAppSyncClient mAWSAppSyncClient;
    int SELECTED_PHOTO = 1;
    Uri uri;
    RadioButton radioButton;
    int[] buttons = new int[3];
    RadioGroup radioGroup;
    int teamPepsiRadioButtonId;
    int teamSpriteRadioButtonId;
    int teamCokeRadioButtonId;
    private AmazonS3Client amazonS3Client;
    private UUID uuid;
    private String imgUrl;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_addtask);

        //gets a random name for uploaded file
        // radiogroup assigning ids to random numbers generated by RadioGroupView
        radioGroup = (RadioGroup) findViewById(R.id.taskTeamRadioGroup);
        int radioGroupSize = radioGroup.getChildCount();
        buttons[0] = teamPepsiRadioButtonId;
        buttons[1] = teamSpriteRadioButtonId;
        buttons[2] = teamCokeRadioButtonId;

        for(int i = 0 ; i < radioGroupSize ; i ++){
            buttons[i] = radioGroup.getChildAt(i).getId();
        }


        Button uploadButton = findViewById(R.id.uploadButton);
        uploadButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(Intent.ACTION_PICK);
                intent.setType("image/*");
                startActivityForResult(intent,SELECTED_PHOTO);
            }
        });

        mAWSAppSyncClient = AWSAppSyncClient.builder()
                .context(getApplicationContext())
                .awsConfiguration(new AWSConfiguration(getApplicationContext()))
                .build();


        ListTeamsQuery teams = ListTeamsQuery.builder().build();
        final HashMap<String, String> teamHashmap = new HashMap<>();
        mAWSAppSyncClient.query(teams).enqueue(new GraphQLCall.Callback<ListTeamsQuery.Data>() {
            @Override
            public void onResponse(@Nonnull Response<ListTeamsQuery.Data> response) {
                for (ListTeamsQuery.Item team : response.data().listTeams().items()) {
                    teamHashmap.put(team.name(), team.id());
                }
            }

            @Override
            public void onFailure(@Nonnull ApolloException e) {
                Log.i("ran", "failed to pull from db");
            }
        });


        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {

            }
        });

        Button b = findViewById(R.id.saveTaskToDbButton);

        b.setOnClickListener(new View.OnClickListener(){
            public void onClick(View v){
                int selectedId = radioGroup.getCheckedRadioButtonId();

                // determining the string value of radio button based on auto generated id number of radio number.
                String selectedTeamTextToChange = "teamPepsi";
                if(selectedId == buttons[0]){
                    selectedTeamTextToChange = "teamPepsi";
                } else if (selectedId == buttons[1]){
                    selectedTeamTextToChange = "teamSprite";
                } else if (selectedId == buttons[2]){
                    selectedTeamTextToChange = "teamCoke";
                }
                EditText taskTitle = findViewById(R.id.addTaskTitle);
                EditText taskBody = findViewById(R.id.addTaskBody);
                setContentView(R.layout.activity_main);
                Log.e("rvrv",selectedTeamTextToChange);


                if(taskTitle.getText().toString().isEmpty()){
                    taskTitle.setError("Field Required");
                    Toast.makeText(getApplicationContext(), "Task Title Missing", Toast.LENGTH_SHORT).show();

                }
                if(taskBody.getText().toString().isEmpty()){
                    taskTitle.setError("Field Required");
                    Toast.makeText(getApplicationContext(), "Task Body Missing", Toast.LENGTH_SHORT).show();
                }

                if(imgUrl.equals("")){
                    taskTitle.setError("Field Required");
                    Toast.makeText(getApplicationContext(), "Picture Needed", Toast.LENGTH_SHORT).show();
                }

                CreateTaskInput createTaskInput = CreateTaskInput.builder()
                        .title(taskTitle.getText().toString())
                        .body(taskBody.getText().toString())
                        .taskTeamId(teamHashmap.get(selectedTeamTextToChange))
                        .state("new")
                        .image(imgUrl)
                        .build();


                mAWSAppSyncClient.mutate(CreateTaskMutation.builder().input(createTaskInput).build()).enqueue(
                        new GraphQLCall.Callback<CreateTaskMutation.Data>() {
                            @Override
                            public void onResponse(@Nonnull Response<CreateTaskMutation.Data> response) {
                                Log.e("rvrv", response.data().toString());
                            }

                            @Override
                            public void onFailure(@Nonnull ApolloException e) {
                                Log.e("rvrv", "failed to save to database");
                            }
                        }
                );
                finish();
            }


        });

    }

    public void uploadWithTransferUtility() {

        TransferUtility transferUtility =
                TransferUtility.builder()
                        .context(getApplicationContext())
                        .awsConfiguration(AWSMobileClient.getInstance().getConfiguration())
                        .s3Client(new AmazonS3Client(AWSMobileClient.getInstance()))
                        .build();


        uuid = UUID.randomUUID();
        String filename = uuid + ".png";
        File f = new File(getApplicationContext().getFilesDir(), filename);
        try{
            f.createNewFile();
            //Convert bitmap to byte array
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, bos);
            byte[] bitmapData = bos.toByteArray();

            //write the bytes in file
            FileOutputStream fos = new FileOutputStream(f);
            fos.write(bitmapData);
            fos.flush();
            fos.close();
        }
        catch (Exception e){
            e.printStackTrace();
        }



        TransferObserver uploadObserver =
                transferUtility.upload(
                        "public/"+filename,
                        new File(getApplicationContext().getFilesDir(),filename),CannedAccessControlList.PublicRead);

        // Attach a listener to the observer to get state update and progress notifications
        uploadObserver.setTransferListener(new TransferListener() {

            @Override
            public void onStateChanged(int id, TransferState state) {
                Log.i("rvrv", "state changed to " + state);
                if (TransferState.COMPLETED == state) {
                    // Handle a completed upload.
                }
            }

            @Override
            public void onProgressChanged(int id, long bytesCurrent, long bytesTotal) {
                float percentDonef = ((float) bytesCurrent / (float) bytesTotal) * 100;
                int percentDone = (int)percentDonef;

                Log.d("rvrv", "ID:" + id + " bytesCurrent: " + bytesCurrent
                        + " bytesTotal: " + bytesTotal + " " + percentDone + "%");
            }

            @Override
            public void onError(int id, Exception ex) {
                // Handle errors
                Log.e("rvrv", ex.toString());
            }

        });

        // If you prefer to poll for the data, instead of attaching a
        // listener, check for the state and progress in the observer.
        if (TransferState.COMPLETED == uploadObserver.getState()) {
            // Handle a completed upload.
        }

        Log.d("rvrv", "Bytes Transferred: " + uploadObserver.getBytesTransferred());
        Log.d("rvrv", "Bytes Total: " + uploadObserver.getBytesTotal());
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(requestCode == SELECTED_PHOTO && resultCode == RESULT_OK && data != null && data.getData() != null) {
            uri = data.getData();
            try {
                bitmap = MediaStore.Images.Media.getBitmap(getContentResolver(),uri);
                uploadWithTransferUtility();
                imgUrl = "https://taskmaster101433-taskmaster.s3.us-east-2.amazonaws.com/public/"+uuid+".png";


            } catch (Exception e) {
                Log.e("rvrv",e.toString());
                e.printStackTrace();
            }
        }
    }

}
